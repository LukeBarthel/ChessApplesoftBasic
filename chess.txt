0 hgr
1 dim bp(15, 2)
2 dim wp(15, 2)
3 f = 1
4 n = 0
5 sc = 16
6 bp(0, 0) = 0 : bp(0, 1) = 1
7 bp(1, 0) = 1 : bp(1, 1) = 1
8 bp(2, 0) = 2 : bp(2, 1) = 1
9 bp(3, 0) = 3 : bp(3, 1) = 1
10 bp(4, 0) = 4 : bp(4, 1) = 1
11 bp(5, 0) = 5 : bp(5, 1) = 1
12 bp(6, 0) = 6 : bp(6, 1) = 1
13 bp(7, 0) = 7 : bp(7, 1) = 1
14 bp(0, 0) = 0 : bp(0, 1) = 0
15 bp(0, 0) = 0 : bp(0, 1) = 0
16 bp(0, 0) = 0 : bp(0, 1) = 0
17 bp(0, 0) = 0 : bp(0, 1) = 0
18 bp(0, 0) = 0 : bp(0, 1) = 0
19 bp(0, 0) = 0 : bp(0, 1) = 0
20 bp(0, 0) = 0 : bp(0, 1) = 0
21 bp(0, 0) = 0 : bp(0, 1) = 0
22 poke 230, 32 : call 62450 : poke 230, 64 : call 62450
23 d = 1000
24 gosub 7000
25 gosub 8000
26 gosub 12000
27 gosub 15000
28 gosub 18000
29 gosub 21000
30 dim cb(63, 1)

100 rem gameLoop
110 gosub 1000
120 gosub 4000
130 gosub 2000
999 goto 130

1000 rem draw setup
1010 poke 230, 32 * (f + 1)
1020 hcolor = 1 : for i = 0 to 7
1030 for it = 0 + n to 7 + n step 2
1040 for ii = 0 to sc - 1
1050 hplot i * sc, it * sc + ii to i * sc + sc - 1, it * sc + ii
1060 next ii
1070 next it
1080 n = not n
1090 next i
1200 px = 0 : py = 1
1210 for it = 0 to 7
1220 px = it
1230 gosub 6000
1240 next it
1250 px = 0 : py = 6
1260 for it = 0 to 7
1270 px = it
1280 gosub 9000
1290 next it
1300 px = 0 : py = 0 : gosub 10000
1310 px = 7 : py = 0 : gosub 10000
1320 px = 0 : py = 7 : gosub 11000
1330 px = 7 : py = 7 : gosub 11000
1340 px = 1 : py = 0 : gosub 13000
1350 px = 6 : py = 0 : gosub 13000
1360 px = 1 : py = 7 : gosub 14000
1370 px = 6 : py = 7 : gosub 14000
1380 px = 2 : py = 0 : gosub 16000
1390 px = 5 : py = 0 : gosub 16000
1400 px = 2 : py = 7 : gosub 17000
1410 px = 5 : py = 7 : gosub 17000
1420 px = 4 : py = 0 : gosub 19000
1430 px = 4 : py = 7 : gosub 20000
1440 px = 3 : py = 0 : gosub 22000
1450 px = 3 : py = 7 : gosub 23000
1460 gosub 24000
1996 poke (49236 + f), 0
1997 f = not f
1999 return

2000 rem player input
2010 let k = peek(49168)
2020 if k = 139 and y <> 0 then y = y - 1 : gosub 4000 : gosub 5000
2030 if k = 138 and y <> 7 then y = y + 1 : gosub 4000 : gosub 5000
2040 if k = 149 and x <> 7 then x = x + 1 : gosub 4000 : gosub 5000
2050 if k = 136 and x <> 0 then x = x - 1 : gosub 4000 : gosub 5000
2060 if k = 160 then pu = not pu : gosub 25000 : gosub 5000
2999 return

3000 rem calculate move
3000 rem //liste mit allen möglichen zügen
3000 rem evaluationswert bestehend aus Materialgewinn, Position (Entwicklung), Checks
3000 rem vergleich mit anderen Zügen. Filter für schlechte Züge (Effizienz)
3000 rem sub besten zug//
3000 rem Punktesystem für Evaluation:
3000 rem orientierung Figurwerte Schach
3000 rem eine Figur zu nehmen addiert ihren wert auf den Evaluationswert
3000 rem eine Figur Mittig zu stellen gibt 1 Punkt
3000 rem den König oder die Dame geschützt anzugreifen gibt 1 punkt
3010 
3999 return

4000 rem draw curser
4010 if ox/2 - int(ox/2) = 0 and oy/2 - int(oy/2) = 0 then hcolor = 1
4020 if ox/2 - int(ox/2) <> 0 and oy/2 - int(oy/2) = 0 then hcolor = 0
4030 if ox/2 - int(ox/2) = 0 and oy/2 - int(oy/2) <> 0 then hcolor = 0
4040 if ox/2 - int(ox/2) <> 0 and oy/2 - int(oy/2) <> 0 then hcolor = 1
4050 hplot ox * sc, oy * sc to ox * sc + sc-1, oy * sc
4060 hplot ox * sc + sc-1, oy * sc to ox * sc + sc-1, oy * sc + sc-1
4070 hplot ox * sc + sc-1, oy * sc + sc-1 to ox * sc, oy * sc + sc-1
4080 hplot ox * sc, oy * sc + sc-1 to ox * sc, oy * sc
4090 if pu = 1 then hcolor = 3
4100 if pu = 0 then hcolor = 2
4120 hplot x * sc, y * sc to x * sc + sc-1, y * sc
4130 hplot x * sc + sc-1, y * sc to x * sc + sc-1, y * sc + sc-1
4140 hplot x * sc + sc-1, y * sc + sc-1 to x * sc, y * sc + sc-1
4150 hplot x * sc, y * sc + sc-1 to x * sc, y * sc
4160 ox = x : oy = y
4999 return

5000 rem delay
5010 for i = 0 to d : next i
5999 return

6000 rem draw black pawn
6010 if px/2 - int(px/2) = 0 and py/2 - int(py/2) = 0 then hcolor = 0 : for i = 0 to 33 step 2 : hplot px * sc + po(i, 0), py * sc + po(i, 1) to px * sc + po(i+1, 0), py * sc + po(i+1, 1) : next i
6020 if px/2 - int(px/2) <> 0 and py/2 - int(py/2) = 0 then hcolor = 1 : for i = 0 to 33 : hplot px * sc + po(i, 0), py * sc + po(i, 1) : next i
6030 if px/2 - int(px/2) = 0 and py/2 - int(py/2) <> 0 then hcolor = 1 : for i = 0 to 33 : hplot px * sc + po(i, 0), py * sc + po(i, 1) : next i
6040 if px/2 - int(px/2) <> 0 and py/2 - int(py/2) <> 0 then hcolor = 0 : for i = 0 to 33 step 2 : hplot px * sc + po(i, 0), py * sc + po(i, 1) to px * sc + po(i+1, 0), py * sc + po(i+1, 1) : next i
6999 return

7000 rem define pawn outline
7010 dim po(33, 1)
7020 po(0, 0) = 7 : po(0, 1) = 1
7030 po(1, 0) = 8 : po(1, 1) = 1
7040 po(2, 0) = 6 : po(2, 1) = 2
7050 po(3, 0) = 9 : po(3, 1) = 2
7060 po(4, 0) = 5 : po(4, 1) = 3
7070 po(5, 0) = 10 : po(5, 1) = 3
7080 po(6, 0) = 5 : po(6, 1) = 4
7090 po(7, 0) = 10 : po(7, 1) = 4
7100 po(8, 0) = 6 : po(8, 1) = 5
7110 po(9, 0) = 9 : po(9, 1) = 5
7120 po(10, 0) = 7 : po(10, 1) = 6
7130 po(11, 0) = 8 : po(11, 1) = 6
7140 po(12, 0) = 7 : po(12, 1) = 7
7150 po(13, 0) = 8 : po(13, 1) = 7
7160 po(14, 0) = 6 : po(14, 1) = 8
7170 po(15, 0) = 9 : po(15, 1) = 8
7180 po(16, 0) = 6 : po(16, 1) = 9
7190 po(17, 0) = 9 : po(17, 1) = 9
7200 po(18, 0) = 6 : po(18, 1) = 10
7210 po(19, 0) = 9 : po(19, 1) = 10
7220 po(20, 0) = 5 : po(20, 1) = 11
7230 po(21, 0) = 10 : po(21, 1) = 11
7240 po(22, 0) = 5 : po(22, 1) = 12
7250 po(23, 0) = 10 : po(23, 1) = 12
7260 po(24, 0) = 4 : po(24, 1) = 13
7270 po(25, 0) = 11: po(25, 1) = 13
7280 po(26, 0) = 4 : po(26, 1) = 14
7290 po(27, 0) = 11: po(27, 1) = 14
7300 po(28, 0) = 5 : po(28, 1) = 14
7310 po(29, 0) = 10 : po(29, 1) = 14
7320 po(30, 0) = 6 : po(30, 1) = 14
7330 po(31, 0) = 9 : po(31, 1) = 14
7340 po(32, 0) = 7 : po(32, 1) = 14
7350 po(33, 0) = 8 : po(33, 1) = 14
7999 return

8000 rem define rook outline
8010 dim ro(37, 1)
8020 ro(0, 0) = 4 : ro(0, 1) = 2
8030 ro(1, 0) = 11 : ro(1, 1) = 2
8040 ro(2, 0) = 5 : ro(2, 1) = 2
8050 ro(3, 0) = 10 : ro(3, 1) = 2
8060 ro(4, 0) = 7 : ro(4, 1) = 2
8070 ro(5, 0) = 8 : ro(5, 1) = 2
8080 ro(6, 0) = 4 : ro(6, 1) = 3
8090 ro(7, 0) = 11 : ro(7, 1) = 3
8100 ro(8, 0) = 6 : ro(8, 1) = 3
8110 ro(9, 0) = 9 : ro(9, 1) = 3
8120 ro(10, 0) = 4 : ro(10, 1) = 4
8130 ro(11, 0) = 11 : ro(11, 1) = 4
8140 ro(12, 0) = 5 : ro(12, 1) = 5
8150 ro(13, 0) = 10 : ro(13, 1) = 5
8160 ro(14, 0) = 5 : ro(14, 1) = 6
8170 ro(15, 0) = 10 : ro(15, 1) = 6
8180 ro(16, 0) = 5 : ro(16, 1) = 7
8190 ro(17, 0) = 10 : ro(17, 1) = 7
8200 ro(18, 0) = 5 : ro(18, 1) = 8
8210 ro(19, 0) = 10 : ro(19, 1) = 8
8220 ro(20, 0) = 5 : ro(20, 1) = 9
8230 ro(21, 0) = 10 : ro(21, 1) = 9
8240 ro(22, 0) = 5 : ro(22, 1) = 10
8250 ro(23, 0) = 10 : ro(23, 1) = 10
8260 ro(24, 0) = 5 : ro(24, 1) = 11
8270 ro(25, 0) = 10 : ro(25, 1) = 11
8280 ro(26, 0) = 5 : ro(26, 1) = 12
8290 ro(27, 0) = 10 : ro(27, 1) = 12
8300 ro(28, 0) = 4 : ro(28, 1) = 13
8310 ro(29, 0) = 11 : ro(29, 1) = 13
8320 ro(30, 0) = 4 : ro(30, 1) = 14
8330 ro(31, 0) = 11 : ro(31, 1) = 14
8340 ro(32, 0) = 5 : ro(32, 1) = 14
8350 ro(33, 0) = 10 : ro(33, 1) = 14
8360 ro(34, 0) = 6 : ro(34, 1) = 14
8370 ro(35, 0) = 9 : ro(35, 1) = 14
8380 ro(36, 0) = 7 : ro(36, 1) = 14
8390 ro(37, 0) = 8 : ro(37, 1) = 14
8999 return

9000 rem draw white pawn
9010 if px/2 - int(px/2) = 0 and py/2 - int(py/2) = 0 then hcolor = 0 : for i = 0 to 33 : hplot px * sc + po(i, 0), py * sc + po(i, 1) : next i
9020 if px/2 - int(px/2) <> 0 and py/2 - int(py/2) = 0 then hcolor = 1 : for i = 0 to 33 step 2 : hplot px * sc + po(i, 0), py * sc + po(i, 1) to px * sc + po(i+1, 0), py * sc + po(i+1, 1) : next i
9030 if px/2 - int(px/2) = 0 and py/2 - int(py/2) <> 0 then hcolor = 1 : for i = 0 to 33 step 2 : hplot px * sc + po(i, 0), py * sc + po(i, 1) to px * sc + po(i+1, 0), py * sc + po(i+1, 1) : next i
9040 if px/2 - int(px/2) <> 0 and py/2 - int(py/2) <> 0 then hcolor = 0 : for i = 0 to 33 : hplot px * sc + po(i, 0), py * sc + po(i, 1) : next i
9999 return

10000 rem draw black rook
10010 if px/2 - int(px/2) = 0 and py/2 - int(py/2) = 0 then hcolor = 0 : for i = 6 to 37 step 2 : hplot px * sc + ro(i, 0), py * sc + ro(i, 1) to px * sc + ro(i+1, 0), py * sc + ro(i+1, 1) : next i : for i = 0 to 5 : hplot px * sc + ro(i, 0), py * sc + ro(i, 1) : next i
10020 if px/2 - int(px/2) <> 0 and py/2 - int(py/2) = 0 then hcolor = 1 : for i = 0 to 37 : hplot px * sc + ro(i, 0), py * sc + ro(i, 1) : next i
10030 if px/2 - int(px/2) = 0 and py/2 - int(py/2) <> 0 then hcolor = 1 : for i = 0 to 37 : hplot px * sc + ro(i, 0), py * sc + ro(i, 1) : next i
10040 if px/2 - int(px/2) <> 0 and py/2 - int(py/2) <> 0 then hcolor = 0 : for i = 6 to 37 step 2 : hplot px * sc + ro(i, 0), py * sc + ro(i, 1) to px * sc + ro(i+1, 0), py * sc + ro(i+1, 1) : next i : for i = 0 to 5 : hplot px * sc + ro(i, 0), py * sc + ro(i, 1) : next i
10999 return

11000 rem draw white rook
11010 if px/2 - int(px/2) = 0 and py/2 - int(py/2) = 0 then hcolor = 0 : for i = 0 to 37 : hplot px * sc + ro(i, 0), py * sc + ro(i, 1) : next i
11020 if px/2 - int(px/2) <> 0 and py/2 - int(py/2) = 0 then hcolor = 1 : for i = 6 to 37 step 2 : hplot px * sc + ro(i, 0), py * sc + ro(i, 1) to px * sc + ro(i+1, 0), py * sc + ro(i+1, 1) : next i : for i = 0 to 5 : hplot px * sc + ro(i, 0), py * sc + ro(i, 1) : next i
11030 if px/2 - int(px/2) = 0 and py/2 - int(py/2) <> 0 then hcolor = 1 : for i = 6 to 37 step 2 : hplot px * sc + ro(i, 0), py * sc + ro(i, 1) to px * sc + ro(i+1, 0), py * sc + ro(i+1, 1) : next i : for i = 0 to 5 : hplot px * sc + ro(i, 0), py * sc + ro(i, 1) : next i
11040 if px/2 - int(px/2) <> 0 and py/2 - int(py/2) <> 0 then hcolor = 0 : for i = 0 to 37 : hplot px * sc + ro(i, 0), py * sc + ro(i, 1) : next i
11999 return

12000 rem define knight outline
12010 dim so(37, 1)
12020 so(0, 0) = 8 : so(0, 1) = 1
12030 so(1, 0) = 6 : so(1, 1) = 2
12040 so(2, 0) = 7 : so(2, 1) = 2
12050 so(3, 0) = 9 : so(3, 1) = 2
12060 so(4, 0) = 5 : so(4, 1) = 3
12070 so(5, 0) = 10 : so(5, 1) = 3
12080 so(6, 0) = 4 : so(6, 1) = 4
12090 so(7, 0) = 11 : so(7, 1) = 4
12100 so(8, 0) = 3 : so(8, 1) = 5
12110 so(9, 0) = 11 : so(9, 1) = 5
12120 so(10, 0) = 2 : so(10, 1) = 6
12130 so(11, 0) = 12 : so(11, 1) = 6
12140 so(12, 0) = 2 : so(12, 1) = 7
12150 so(13, 0) = 12 : so(13, 1) = 7
12160 so(14, 0) = 5 : so(14, 1) = 7
12170 so(15, 0) = 6 : so(15, 1) = 7
12180 so(16, 0) = 3 : so(16, 1) = 8
12190 so(17, 0) = 12 : so(17, 1) = 8
12200 so(18, 0) = 4 : so(18, 1) = 8
12210 so(19, 0) = 7 : so(19, 1) = 8
12220 so(20, 0) = 7 : so(20, 1) = 9
12230 so(21, 0) = 12 : so(21, 1) = 9
12240 so(22, 0) = 6 : so(22, 1) = 10
12250 so(23, 0) = 11 : so(23, 1) = 10
12260 so(24, 0) = 6 : so(24, 1) = 11
12270 so(25, 0) = 11 : so(25, 1) = 11
12280 so(26, 0) = 5 : so(26, 1) = 12
12290 so(27, 0) = 11 : so(27, 1) = 12
12300 so(28, 0) = 5 : so(28, 1) = 13
12310 so(29, 0) = 11 : so(29, 1) = 13
12320 so(30, 0) = 4 : so(30, 1) = 14
12330 so(31, 0) = 11 : so(31, 1) = 14
12340 so(32, 0) = 5 : so(32, 1) = 14
12350 so(33, 0) = 10 : so(33, 1) = 14
12360 so(34, 0) = 6 : so(34, 1) = 14
12370 so(35, 0) = 9 : so(35, 1) = 14
12380 so(36, 0) = 7 : so(36, 1) = 14
12390 so(37, 0) = 8 : so(37, 1) = 14
12999 return

13000 rem draw black knight
13010 if px/2 - int(px/2) = 0 and py/2 - int(py/2) = 0 then hcolor = 0 : for i = 0 to 37 : hplot px * sc + 8, py * sc + 5 to px * sc + so(i, 0), py * sc + so(i, 1) : next i
13020 if px/2 - int(px/2) <> 0 and py/2 - int(py/2) = 0 then hcolor = 1 : for i = 0 to 37 : hplot px * sc + so(i, 0), py * sc + so(i, 1) : next i
13030 if px/2 - int(px/2) = 0 and py/2 - int(py/2) <> 0 then hcolor = 1 : for i = 0 to 37 : hplot px * sc + so(i, 0), py * sc + so(i, 1) : next i
13040 if px/2 - int(px/2) <> 0 and py/2 - int(py/2) <> 0 then hcolor = 0 : for i = 0 to 37 : hplot px * sc + 8, py * sc + 5 to px * sc + so(i, 0), py * sc + so(i, 1) : next i
13999 return

14000 rem draw white knight
14010 if px/2 - int(px/2) = 0 and py/2 - int(py/2) = 0 then hcolor = 0 : for i = 0 to 37 : hplot px * sc + so(i, 0), py * sc + so(i, 1) : next i
14020 if px/2 - int(px/2) <> 0 and py/2 - int(py/2) = 0 then hcolor = 1 : for i = 0 to 37 : hplot px * sc + 8, py * sc + 5 to px * sc + so(i, 0), py * sc + so(i, 1) : next i
14030 if px/2 - int(px/2) = 0 and py/2 - int(py/2) <> 0 then hcolor = 1 : for i = 0 to 37 : hplot px * sc + 8, py * sc + 5 to px * sc + so(i, 0), py * sc + so(i, 1) : next i
14040 if px/2 - int(px/2) <> 0 and py/2 - int(py/2) <> 0 then hcolor = 0 : for i = 0 to 37 : hplot px * sc + so(i, 0), py * sc + so(i, 1) : next i
14999 return

15000 rem define bishop outline
15010 dim bo(35, 1)
15020 bo(0, 0) = 7 : bo(0, 1) = 1
15030 bo(1, 0) = 6 : bo(1, 1) = 2
15040 bo(2, 0) = 8 : bo(2, 1) = 2
15050 bo(3, 0) = 5 : bo(3, 1) = 3
15060 bo(4, 0) = 8 : bo(4, 1) = 3
15070 bo(5, 0) = 4 : bo(5, 1) = 4
15080 bo(6, 0) = 8 : bo(6, 1) = 4
15090 bo(7, 0) = 3 : bo(7, 1) = 5
15100 bo(8, 0) = 7 : bo(8, 1) = 5
15110 bo(9, 0) = 9 : bo(9, 1) = 5
15120 bo(10, 0) = 10 : bo(10, 1) = 5
15130 bo(11, 0) = 3 : bo(11, 1) = 6
15140 bo(12, 0) = 6 : bo(12, 1) = 6
15150 bo(13, 0) = 8 : bo(13, 1) = 6
15160 bo(14, 0) = 11 : bo(14, 1) = 6
15170 bo(15, 0) = 3 : bo(15, 1) = 7
15180 bo(16, 0) = 11 : bo(16, 1) = 7
15190 bo(17, 0) = 3 : bo(17, 1) = 7
15200 bo(18, 0) = 11 : bo(18, 1) = 7
15210 bo(19, 0) = 3 : bo(19, 1) = 8
15220 bo(20, 0) = 11 : bo(20, 1) = 8
15230 bo(21, 0) = 3 : bo(21, 1) = 9
15240 bo(22, 0) = 11 : bo(22, 1) = 9
15250 bo(23, 0) = 4 : bo(23, 1) = 10
15260 bo(24, 0) = 10 : bo(24, 1) = 10
15270 bo(25, 0) = 3 : bo(25, 1) = 11
15280 bo(26, 0) = 11 : bo(26, 1) = 11
15290 bo(27, 0) = 3 : bo(27, 1) = 12
15300 bo(28, 0) = 11 : bo(28, 1) = 12
15310 bo(29, 0) = 4 : bo(29, 1) = 13
15320 bo(30, 0) = 10 : bo(30, 1) = 13
15330 bo(31, 0) = 5 : bo(31, 1) = 14
15340 bo(32, 0) = 9 : bo(32, 1) = 14
15350 bo(33, 0) = 6 : bo(33, 1) = 14
15360 bo(34, 0) = 8 : bo(34, 1) = 14
15370 bo(35, 0) = 7 : bo(35, 1) = 14
15999 return

16000 rem draw black bishop
16010 if px/2 - int(px/2) = 0 and py/2 - int(py/2) = 0 then hcolor = 0 : for i = 1 to 31 step 2 : hplot px * sc + bo(i, 0), py * sc + bo(i, 1) to px * sc + bo(i+1, 0), py * sc + bo(i+1, 1) : next i : hplot px * sc + bo(0, 0), py * sc + bo(0, 1)
16020 if px/2 - int(px/2) <> 0 and py/2 - int(py/2) = 0 then hcolor = 1 : for i = 0 to 35 : hplot px * sc + bo(i, 0), py * sc + bo(i, 1) : next i
16030 if px/2 - int(px/2) = 0 and py/2 - int(py/2) <> 0 then hcolor = 1 : for i = 0 to 35 : hplot px * sc + bo(i, 0), py * sc + bo(i, 1) : next i
16040 if px/2 - int(px/2) <> 0 and py/2 - int(py/2) <> 0 then hcolor = 0 : for i = 1 to 31 step 2 : hplot px * sc + bo(i, 0), py * sc + bo(i, 1) to px * sc + bo(i+1, 0), py * sc + bo(i+1, 1) : next i : hplot px * sc + bo(0, 0), py * sc + bo(0, 1)
16999 return

17000 rem draw white bishop
17010 if px/2 - int(px/2) = 0 and py/2 - int(py/2) = 0 then hcolor = 0 : for i = 0 to 35 : hplot px * sc + bo(i, 0), py * sc + bo(i, 1) : next i
17020 if px/2 - int(px/2) <> 0 and py/2 - int(py/2) = 0 then hcolor = 1 : for i = 1 to 31 step 2 : hplot px * sc + bo(i, 0), py * sc + bo(i, 1) to px * sc + bo(i+1, 0), py * sc + bo(i+1, 1) : next i : hplot px * sc + bo(0, 0), py * sc + bo(0, 1)
17030 if px/2 - int(px/2) = 0 and py/2 - int(py/2) <> 0 then hcolor = 1 : for i = 1 to 31 step 2 : hplot px * sc + bo(i, 0), py * sc + bo(i, 1) to px * sc + bo(i+1, 0), py * sc + bo(i+1, 1) : next i : hplot px * sc + bo(0, 0), py * sc + bo(0, 1)
17040 if px/2 - int(px/2) <> 0 and py/2 - int(py/2) <> 0 then hcolor = 0 : for i = 0 to 35 : hplot px * sc + bo(i, 0), py * sc + bo(i, 1) : next i
17999 return

18000 rem define king outline
18010 dim ko(35, 1)
18020 ko(0, 0) = 7 : ko(0, 1) = 1
18030 ko(1, 0) = 8 : ko(1, 1) = 1
18040 ko(2, 0) = 6 : ko(2, 1) = 2
18050 ko(3, 0) = 9 : ko(3, 1) = 2
18060 ko(4, 0) = 7 : ko(4, 1) = 2
18070 ko(5, 0) = 8 : ko(5, 1) = 2
18080 ko(6, 0) = 7 : ko(6, 1) = 3
18090 ko(7, 0) = 8 : ko(7, 1) = 3
18100 ko(8, 0) = 6 : ko(8, 1) = 4
18110 ko(9, 0) = 9 : ko(9, 1) = 4
18120 ko(10, 0) = 5 : ko(10, 1) = 5
18130 ko(11, 0) = 10 : ko(11, 1) = 5
18140 ko(12, 0) = 5 : ko(12, 1) = 6
18150 ko(13, 0) = 10 : ko(13, 1) = 6
18160 ko(14, 0) = 6 : ko(14, 1) = 7
18170 ko(15, 0) = 9 : ko(15, 1) = 7
18180 ko(16, 0) = 6 : ko(16, 1) = 8
18190 ko(17, 0) = 9 : ko(17, 1) = 8
18200 ko(18, 0) = 6 : ko(18, 1) = 9
18210 ko(19, 0) = 9 : ko(19, 1) = 9
18220 ko(20, 0) = 5 : ko(20, 1) = 10
18230 ko(21, 0) = 10 : ko(21, 1) = 10
18240 ko(22, 0) = 5 : ko(22, 1) = 11
18250 ko(23, 0) = 10 : ko(23, 1) = 11
18260 ko(24, 0) = 5 : ko(24, 1) = 12
18270 ko(25, 0) = 10 : ko(25, 1) = 12
18280 ko(26, 0) = 4 : ko(26, 1) = 13
18290 ko(27, 0) = 11 : ko(27, 1) = 13
18300 ko(28, 0) = 4 : ko(28, 1) = 14
18310 ko(29, 0) = 11 : ko(29, 1) = 14
18320 ko(30, 0) = 5 : ko(30, 1) = 14
18330 ko(31, 0) = 10 : ko(31, 1) = 14
18340 ko(32, 0) = 6 : ko(32, 1) = 14
18350 ko(33, 0) = 9 : ko(33, 1) = 14
18360 ko(34, 0) = 7 : ko(34, 1) = 14
18370 ko(35, 0) = 8 : ko(35, 1) = 14
18999 return

19000 rem draw black king
19010 if px/2 - int(px/2) = 0 and py/2 - int(py/2) = 0 then hcolor = 0 : for i = 0 to 31 step 2 : hplot px * sc + ko(i, 0), py * sc + ko(i, 1) to px * sc + ko(i+1, 0), py * sc + ko(i+1, 1) : next i
19020 if px/2 - int(px/2) <> 0 and py/2 - int(py/2) = 0 then hcolor = 1 : for i = 0 to 35 : hplot px * sc + ko(i, 0), py * sc + ko(i, 1) : next i
19030 if px/2 - int(px/2) = 0 and py/2 - int(py/2) <> 0 then hcolor = 1 : for i = 0 to 35 : hplot px * sc + ko(i, 0), py * sc + ko(i, 1) : next i
19040 if px/2 - int(px/2) <> 0 and py/2 - int(py/2) <> 0 then hcolor = 0 : for i = 0 to 31 step 2 : hplot px * sc + ko(i, 0), py * sc + ko(i, 1) to px * sc + ko(i+1, 0), py * sc + ko(i+1, 1) : next i
19999 return

20000 rem draw white king
20010 if px/2 - int(px/2) = 0 and py/2 - int(py/2) = 0 then hcolor = 0 : for i = 0 to 35 : hplot px * sc + ko(i, 0), py * sc + ko(i, 1) : next i
20020 if px/2 - int(px/2) <> 0 and py/2 - int(py/2) = 0 then hcolor = 1 : for i = 0 to 31 step 2 : hplot px * sc + ko(i, 0), py * sc + ko(i, 1) to px * sc + ko(i+1, 0), py * sc + ko(i+1, 1) : next i
20030 if px/2 - int(px/2) = 0 and py/2 - int(py/2) <> 0 then hcolor = 1 : for i = 0 to 31 step 2 : hplot px * sc + ko(i, 0), py * sc + ko(i, 1) to px * sc + ko(i+1, 0), py * sc + ko(i+1, 1) : next i
20040 if px/2 - int(px/2) <> 0 and py/2 - int(py/2) <> 0 then hcolor = 0 : for i = 0 to 35 : hplot px * sc + ko(i, 0), py * sc + ko(i, 1) : next i
20999 return

21000 rem define queen outline
21010 dim qo(37, 1)
21020 qo(0, 0) = 7 : qo(0, 1) = 1
21030 qo(1, 0) = 8 : qo(1, 1) = 1
21040 qo(2, 0) = 5 : qo(2, 1) = 2
21050 qo(3, 0) = 10 : qo(3, 1) = 2
21060 qo(4, 0) = 6 : qo(4, 1) = 2
21070 qo(5, 0) = 9 : qo(5, 1) = 2
21080 qo(6, 0) = 4 : qo(6, 1) = 3
21090 qo(7, 0) = 11 : qo(7, 1) = 3
21100 qo(8, 0) = 7 : qo(8, 1) = 3
21110 qo(9, 0) = 8 : qo(9, 1) = 3
21120 qo(10, 0) = 4 : qo(10, 1) = 4
21130 qo(11, 0) = 11 : qo(11, 1) = 4
21140 qo(12, 0) = 5 : qo(12, 1) = 5
21150 qo(13, 0) = 10 : qo(13, 1) = 5
21160 qo(14, 0) = 6 : qo(14, 1) = 6
21170 qo(15, 0) = 9 : qo(15, 1) = 6
21180 qo(16, 0) = 6 : qo(16, 1) = 7
21190 qo(17, 0) = 9 : qo(17, 1) = 7
21200 qo(18, 0) = 6 : qo(18, 1) = 8
21210 qo(19, 0) = 9 : qo(19, 1) = 8
21220 qo(20, 0) = 6 : qo(20, 1) = 9
21230 qo(21, 0) = 9 : qo(21, 1) = 9
21240 qo(22, 0) = 5 : qo(22, 1) = 10
21250 qo(23, 0) = 10 : qo(23, 1) = 10
21260 qo(24, 0) = 5 : qo(24, 1) = 11
21270 qo(25, 0) = 10 : qo(25, 1) = 11
21280 qo(26, 0) = 5 : qo(26, 1) = 12
21290 qo(27, 0) = 10 : qo(27, 1) = 12
21300 qo(28, 0) = 4 : qo(28, 1) = 13
21310 qo(29, 0) = 11 : qo(29, 1) = 13
21320 qo(30, 0) = 4 : qo(30, 1) = 14
21330 qo(31, 0) = 11 : qo(31, 1) = 14
21340 qo(32, 0) = 5 : qo(32, 1) = 14
21350 qo(33, 0) = 10 : qo(33, 1) = 14
21360 qo(34, 0) = 6 : qo(34, 1) = 14
21370 qo(35, 0) = 9 : qo(35, 1) = 14
21380 qo(36, 0) = 7 : qo(36, 1) = 14
21390 qo(37, 0) = 8 : qo(37, 1) = 14
21999 return

22000 rem draw black queen
22010 if px/2 - int(px/2) = 0 and py/2 - int(py/2) = 0 then hcolor = 0 : for i = 6 to 33 step 2 : hplot px * sc + qo(i, 0), py * sc + qo(i, 1) to px * sc + qo(i+1, 0), py * sc + qo(i+1, 1) : next i : for i = 0 to 5 : hplot px * sc + qo(i, 0), py * sc + qo(i, 1) : next i
22020 if px/2 - int(px/2) <> 0 and py/2 - int(py/2) = 0 then hcolor = 1 : for i = 0 to 37 : hplot px * sc + qo(i, 0), py * sc + qo(i, 1) : next i
22030 if px/2 - int(px/2) = 0 and py/2 - int(py/2) <> 0 then hcolor = 1 : for i = 0 to 37 : hplot px * sc + qo(i, 0), py * sc + qo(i, 1) : next i
22040 if px/2 - int(px/2) <> 0 and py/2 - int(py/2) <> 0 then hcolor = 0 : for i = 6 to 33 step 2 : hplot px * sc + qo(i, 0), py * sc + qo(i, 1) to px * sc + qo(i+1, 0), py * sc + qo(i+1, 1) : next i : for i = 0 to 5 : hplot px * sc + qo(i, 0), py * sc + qo(i, 1) : next i
22999 return

23000 rem draw white queen
23010 if px/2 - int(px/2) = 0 and py/2 - int(py/2) = 0 then hcolor = 0 : for i = 0 to 37 : hplot px * sc + qo(i, 0), py * sc + qo(i, 1) : next i
23020 if px/2 - int(px/2) <> 0 and py/2 - int(py/2) = 0 then hcolor = 1 : for i = 6 to 33 step 2 : hplot px * sc + qo(i, 0), py * sc + qo(i, 1) to px * sc + qo(i+1, 0), py * sc + qo(i+1, 1) : next i : for i = 0 to 5 : hplot px * sc + qo(i, 0), py * sc + qo(i, 1) : next i
23030 if px/2 - int(px/2) = 0 and py/2 - int(py/2) <> 0 then hcolor = 1 : for i = 6 to 33 step 2 : hplot px * sc + qo(i, 0), py * sc + qo(i, 1) to px * sc + qo(i+1, 0), py * sc + qo(i+1, 1) : next i : for i = 0 to 5 : hplot px * sc + qo(i, 0), py * sc + qo(i, 1) : next i
23040 if px/2 - int(px/2) <> 0 and py/2 - int(py/2) <> 0 then hcolor = 0 : for i = 0 to 37 : hplot px * sc + qo(i, 0), py * sc + qo(i, 1) : next i
23999 return

24000 rem setup board
24010 for i = 0 to 7
24020 cb(8 + i, 0) = 0 : cb(8 + i, 1) = 1
24030 next i
24040 for i = 0 to 7
24050 cb(55 - i, 0) = 1 : cb(55 - i, 1) = 1
24060 next i
24070 cb(0, 0) = 0 : cb(0, 1) = 2
24080 cb(7, 0) = 0 : cb(7, 1) = 2
24090 cb(56, 0) = 1 : cb(56, 1) = 2
24100 cb(63, 0) = 1 : cb(63, 1) = 2
24110 cb(1, 0) = 0 : cb(1, 1) = 3
24120 cb(6, 0) = 0 : cb(6, 1) = 3
24130 cb(57, 0) = 1 : cb(57, 1) = 3
24140 cb(62, 0) = 1 : cb(62, 1) = 3
24150 cb(2, 0) = 0 : cb(2, 1) = 4
24160 cb(5, 0) = 0 : cb(5, 1) = 4
24170 cb(58, 0) = 1 : cb(58, 1) = 4
24180 cb(61, 0) = 1 : cb(61, 1) = 4
24190 cb(3, 0) = 0 : cb(3, 1) = 5
24200 cb(59, 0) = 1 : cb(59, 1) = 5
24210 cb(4, 0) = 0 : cb(4, 1) = 6
24220 cb(60, 0) = 1 : cb(60, 1) = 6
24999 return

25000 rem check for picked up piece
25010 if pu = 1 then a = cb(x + y * 8, 0) : b = cb(x + y * 8, 1) : cb(x + y * 8, 0) = 0 : cb(x + y * 8, 1) = 0 : sx = x : sy = y : hcolor = 3 : hplot x * sc, y * sc to x * sc + sc-1, y * sc : hplot x * sc + sc-1, y * sc to x * sc + sc-1, y * sc + sc-1 : hplot x * sc + sc-1, y * sc + sc-1 to x * sc, y * sc + sc-1 : hplot x * sc, y * sc + sc-1 to x * sc, y * sc
25020 if pu = 0 and b = 0 then gosub 4000 : goto 25999
25030 if pu = 0 then cb(x + y * 8, 0) = a : cb(x + y * 8, 1) = b : gosub 26000 : sx = x : sy = y : gosub 26000 : px = x : py = y : gosub 27000 : gosub 4000
25999 return

26000 rem draw square
26010 if sx/2 - int(sx/2) = 0 and sy/2 - int(sy/2) = 0 then hcolor = 1 
26020 if sx/2 - int(sx/2) <> 0 and sy/2 - int(sy/2) = 0 then hcolor = 0 
26030 if sx/2 - int(sx/2) = 0 and sy/2 - int(sy/2) <> 0 then hcolor = 0
26040 if sx/2 - int(sx/2) <> 0 and sy/2 - int(sy/2) <> 0 then hcolor = 1
26050 for i = 0 to sc - 1
26070 hplot sx * sc, sy * sc + i to sx * sc + sc - 1, sy * sc + i
26090 next i
26999 return

27000 rem paste piece
27010 if b = 1 and a = 0 then gosub 6000
27020 if b = 1 and a = 1 then gosub 9000
27030 if b = 2 and a = 0 then gosub 10000
27040 if b = 2 and a = 1 then gosub 11000
27050 if b = 3 and a = 0 then gosub 13000
27060 if b = 3 and a = 1 then gosub 14000
27070 if b = 4 and a = 0 then gosub 16000
27080 if b = 4 and a = 1 then gosub 17000
27090 if b = 6 and a = 0 then gosub 19000
27100 if b = 6 and a = 1 then gosub 20000
27110 if b = 5 and a = 0 then gosub 22000
27120 if b = 5 and a = 1 then gosub 23000
27999 return